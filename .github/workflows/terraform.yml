# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#

name: 'Terraform'

on:
  push:
    branches:
    - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: self-hosted

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout and substitute
      uses: actions/checkout@v2
    
    - name: Update the parameters
      run: |
        sed -i 's/CLIENT_SECRET/${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}/' k8s.tf
        sed -i 's/ROOTPASSWORD/${{ secrets.MYSQL_ROOT_PASSWORD }}/' kustomization.yaml
        sed -i 's/USERPASSWORD/${{ secrets.MYSQL_USER_PASSWORD }}/' kustomization.yaml

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME}}" -backend-config="container_name=tfstate" -backend-config="access_key=${{ secrets.STORAGE_ACCOUNT_ACCESS_KEY}}" -backend-config="key=codelab.microsoft.tfstate" 

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -out out.plan

    # Apply the execution plan
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply out.plan

  application:
    name: 'application'
    needs: Terraform
    runs-on: self-hosted
    steps:
    - name: Save the config file
      run: echo "$(terraform output -json kube_config| jq -r .)" > $HOME/.kube/config 
      
    - name: List nodes
      run: kubectl get nodes

    - name: Deploy application
      run: kubectl apply -k ./
    
    - name: Display service details
      run: kubectl get svc  
